import sys


def is_prime(n):
    if n % 2 == 0:
        return n == 2
    d = 3
    while d * d <= n and n % d != 0:
        d += 2
    return d * d > n


def f(x):
    """
    https://ru.wikipedia.org/wiki/Проблема_Гольдбаха
    x - простое: return 1
    x - не простое:
        четное:
            На апрель 2012 года бинарная гипотеза Гольдбаха была проверена для всех чётных чисел,
            не превышающих 4×10^18. Тоесть для всех четных f(x) = 2, тк любое четное число из данного диапазона
            раскладывается на два простых которые в нашей функции дадут минимум = 2. Область определения однако <10^9.
            Нам достаточно.
            return 2
        нечетное:
            любое нечётное число, начиная с 7, можно представить в виде суммы трёх простых чисел
            тернарная гипотеза Гольдбаха, доказана в 2013
            return 3

    :param x:
    :return:
    """
    if is_prime(x):
        return 1
    if x % 2 == 0:
        return 2
    return 3


def main():
    x = int(sys.stdin.readline().strip())
    sys.stdout.write(str(f(x)))


if __name__ == "__main__":
    main()
